{"version":3,"sources":["components/AddCategory.js","helpers.js/getGIfs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","prototype","PropTypes","func","isRequired","getGifs","category","a","fetch","resp","json","data","gifs","map","img","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","console","log","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"4NAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAWA,OACI,sBAAMC,SAPW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,GACxBR,GAAc,SAACS,GAAD,OAASP,GAAT,mBAAuBO,QAIzC,SACI,uBACIC,KAAQ,OACRC,MAAST,EACTU,SAdc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,aAmB/BZ,EAAYe,UAAY,CACpBd,cAAgBe,IAAUC,KAAKC,Y,mCC5BtBC,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,+KAEAC,MAFA,yHAEbC,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAI,SAACC,GAAO,IAAD,EACzB,MAAO,CACHC,GAAUD,EAAIC,GACdC,MAAUF,EAAIE,MACdC,IAAG,UAAOH,EAAII,cAAX,aAAO,EAAYC,iBAAiBF,QAR5B,kBAWZL,GAXY,4CAAH,sDCEPQ,EAAc,SAAC,GAAiB,IAAhBJ,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAG/B,OACI,sBAAKI,UAAY,OAAjB,UACI,qBACIC,IAAOL,EACPM,IAAOP,IAEX,4BAAIA,QCPHQ,EAAU,SAAC,GAAgB,IAAflB,EAAc,EAAdA,SAEjB,ECJoB,SAACA,GACzB,MAA0BlB,mBAAS,CAC/BuB,KAAU,GACVc,SAAU,IAFd,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAZAC,qBAAU,WACNvB,EAAQC,GAAUuB,MAAK,SAACC,GACpBC,YAAW,WACPC,QAAQC,IAAIH,GACZH,EAAS,CACLhB,KAAUmB,EACVL,SAAU,MAEf,UAET,CAACnB,IAEIoB,EDb6BQ,CAAa5B,GAA/BY,EAAd,EAAOP,KAAcc,EAArB,EAAqBA,QAIzB,OACI,qCACK,6BAAKnB,IACJmB,GAAW,wCACZ,qBAAKJ,UAAY,YAAjB,SAEOH,EAAOL,KAAI,SAACC,GACR,OAAO,cAAC,EAAD,eAEHA,GADGA,EAAIC,aEdtBoB,EAAe,WACxB,MAAoC/C,mBAAS,CAAC,cAA9C,mBAAOgD,EAAP,KAAmBjD,EAAnB,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBACA,6BAECiD,EAAWvB,KAAI,SAACP,GAAD,OACX,cAAC,EAAD,CAEGnB,cAAiBmB,GADVA,YCX3B+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.fb1d31ec.chunk.js","sourcesContent":["import React from 'react'\nimport { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setcategories}) => {\n    const [inputValue, setinputValue] = useState('');\n\n    const handleInputChange = (e)=>{\n        setinputValue(e.target.value);\n    }\n    const handleSubmit = (e)=>{\n        e.preventDefault();\n        if(inputValue.trim().length>2){\n            setcategories((cats)=>[inputValue,...cats]);\n        }\n    }\n    return (\n        <form onSubmit = {handleSubmit}>\n            <input\n                type  = 'text'\n                value = {inputValue}\n                onChange = {handleInputChange}\n            />\n        </form>\n    )\n\n}\nAddCategory.prototype = {\n    setcategories : PropTypes.func.isRequired,\n}","export const getGifs = async (category)=>{\n    const url = `https://api.giphy.com/v1/gifs/search?q=rick and morty&limit=10&api_key=wFT9d2n4eWsSTQsvZsOVJac6MyxoId2A`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    const gifs = data.map((img)=>{\n        return {\n            id      : img.id,\n            title   : img.title,\n            url     : img.images?.downsized_medium.url,\n        }\n    })\n    return gifs;\n}\n","import React from 'react'\n\nexport const GifGridItem = ({title,url}) => {\n    \n\n    return (\n        <div className = 'card'>\n            <img \n                src = {url}\n                alt = {title}\n            />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n// import { getGifs } from './helpers.js/getGIfs';\nexport const GifGrid = ({category}) => {\n        // const [images, setImages] = useState([]);\n        const {data : images,loading} = useFetchGifs(category);\n        // useEffect(()=>{\n        //     getGifs(category).then(imgs => setImages(imgs))\n        // },[]);\n    return (\n        <>\n             <h3>{category}</h3>\n             {loading && <p>Loading</p>}\n             <div className = 'card-grid'>\n                {\n                    images.map((img)=>{\n                        return <GifGridItem \n                        key = {img.id}\n                        {...img}\n                        />\n                    })\n                }\n            </div>\n        </>\n       \n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers.js/getGIfs\";\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data    : [],\n        loading : true,\n    });\n    useEffect(()=>{\n        getGifs(category).then((imgs)=>{\n            setTimeout(() => {\n                console.log(imgs);\n                setState({\n                    data    : imgs,\n                    loading : false,\n                })\n            }, 3000);\n        })\n    },[category])\n    \n    return state;\n}\n","import { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n    const [categories, setcategories] = useState(['one punch']);\n    \n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setcategories = {setcategories}/>\n            <hr/>\n            <ol>\n             {\n             categories.map((category) =>(\n                 <GifGrid \n                    key = {category}\n                    setcategories = {category}\n                 />\n                ))\n            }\n            </ol>\n                \n        </>\n    )\n            }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp'\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}